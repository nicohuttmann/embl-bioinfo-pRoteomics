[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Hi friends, welcome Introduction Data Analysis Visualization R. document contains explanations material group project produced RStudio using RMarkdown document ‘knitted’ html file. ’ll maybe get later.1","code":""},{"path":"index.html","id":"group-work-structure","chapter":"Preface","heading":"Group work structure","text":"Ok, enough bla. document live course folder alongside materials like PowerPoint presentation guide us sections group, code, raw data maybe stuff.ADD IMAGE somethingThe first chapters document R Basics (left) provide short introduction coding R. Parts reference book R Data Science (2e). great resource everyone beginner expert. recommend matter , relatively new R course, go days use opportunity discuss concepts book group setting. first 2.5 h session Tuesday suffice get everyone page ready start exploring real data Group Work Project.can go project individually groups. case, recommend putting code R script matter . step, problem facing described alongside final goal. , can either figure code entirely , use hint, copy complete code snippet document run . latter option comes close many problems coding solved - define problem, google , find answer StackOverflow copy script. Yay, ’re data scientist now!","code":""},{"path":"r-and-rstudio.html","id":"r-and-rstudio","chapter":"1 R and RStudio","heading":"1 R and RStudio","text":"“R ‘GNU S’, freely available language environment statistical computing graphics provides wide variety statistical graphical techniques: linear nonlinear modelling, statistical tests, time series analysis, classification, clustering, etc.”description R R website.","code":""},{"path":"r-and-rstudio.html","id":"install-the-r-language","chapter":"1 R and RStudio","heading":"1.1 Install the R language","text":"Download recent release R platform https://cloud.r-project.org/. Install like program. important install R RStudio.","code":""},{"path":"r-and-rstudio.html","id":"install-rstudio","chapter":"1 R and RStudio","heading":"1.2 Install RStudio","text":"RStudio integrated development environment (IDE) R. IDEs exist, RStudio software choice far. Like, far. Download desktop version RStudio https://www.rstudio.com/products/rstudio/. program interact R language conduct analyses.","code":""},{"path":"how-does-r-work.html","id":"how-does-r-work","chapter":"2 How does R work?","heading":"2 How does R work?","text":"“understand computations R, two slogans helpful:\nEverything exists object.\nEverything happens function call.” — John Chambers2Ok, cool. now? Well, statement tells us everything R code falls two categories, either object function (likely take object input give back modified object return).","code":""},{"path":"how-does-r-work.html","id":"objects","chapter":"2 How does R work?","heading":"2.1 Objects","text":"Please look workflow basics first introduction recapitulation3 coding R.\nimportant takeaway can assign (create) object R assignment operator <-. , __c__ombine function c()4 one frequently used functions R.c(1, 2, 3) -> numbers works well, please ever .5\ncreated called vector, precisely atomic vector. means elements type. can read Vectors chapter Advanced R waiting time unsure behavior vectors. Examples :unhappy type data changed previous example, simply change c() list().6\ndata types can found Vectors chapter mentioned previously covered project eventually.","code":"\n# Assign the vector to an object called numbers\nnumbers <- c(1, 2, 3)\n# Execute the following line to print it to the console\nnumbers\n#> [1] 1 2 3\n# Some objects (not this one) need to be forced to show in the console \nprint(numbers)\n#> [1] 1 2 3\nmixed_numbers <- c(0, 1, 2, \"three\")\nmixed_numbers_2 <- c(F, TRUE, 2, 3)\n# You don't actually need to assign them\nc(F, TRUE, 2, \"three\")\nlist(0, 1, 2, \"three\")\nlist(F, TRUE, 2, 3)\nlist(\"these\" = F, \"are\" = TRUE, \"names\" = 2, \"three\")\nlist(\"and\" = F, \"they\" = TRUE, \"work\" = 2, \"notemptyanymore\" = \"for both lists and vectors :)\")"},{"path":"how-does-r-work.html","id":"functions","chapter":"2 How does R work?","heading":"2.2 Functions","text":"Besides basic object R, vector, also covered two functions well. c() list() functions allow us create atomic vector list objects. want understand function, simply write ?c7 R prompt documentation function Help pane bottom right.8The number functions exceeds number object types far, therefore see use functions properly. function 1. name, 2. object 3. can evoked () brakets following name. Let’s try :Nice! bad example. Write function name sum wait list options appear. happen, can press Tab. see list, scroll arrow buttons choose function Tab Enter. cursor brackets function, press Tab . Now, see arguments function. Arguments different inputs function declare precisely input goes within function. bad example special type argument ..., (dot-dot-dot), accepts undefined number arguments, case multiple numbers.better example intersect() function, takes two sets form atomic vectors x y returns intersection.Set Operation functions useful one point sure. Another resource worth mentioning R-bloggers website.formal description functions, can read function fundamentals. now let’s see functions come .","code":"\nsum(1, 2, 3)\n#> [1] 6\nintersect(x = c(1, 2, 3), \n          y = c(2, 3, 4))\n#> [1] 2 3"},{"path":"r-packages.html","id":"r-packages","chapter":"3 R packages","heading":"3 R packages","text":"“R packages collections functions data sets developed community. increase power R improving existing base R functionalities, adding new ones.”9Basically, R packages nothing collections functions bundled together way makes sense. Like different cookbooks contain recipes particular kind food. can installed many different sources explored .","code":""},{"path":"r-packages.html","id":"from-cran","chapter":"3 R packages","heading":"3.1 From CRAN","text":"Comprehensive R Archive Network (CRAN) package repository features 18,000+ R packages. ’s list Available CRAN Packages Name. general purpose packages can found , however due reasons, packages available sources.first example, download tidyverse, collection R packages data science.“tidyverse opinionated collection R packages designed data science. packages share underlying design philosophy, grammar, data structures.”can install packages CRAN install.packages() function like :Note, can also download one package using vector (c()) containing package names:BiocManager well devtools used following download R packages sources.","code":"\ninstall.packages(\"tidyverse\")\ninstall.packages(c(\"BiocManager\", \"devtools\"))"},{"path":"r-packages.html","id":"from-bioconductor","chapter":"3 R packages","heading":"3.2 From Bioconductor","text":"Bioconductor collection R packages bioinformatics purposes. first packages need Bioconductor downloaded install() function BiocManager package:","code":"\nBiocManager::install(c(\"fgsea\",\n                       \"org.Hs.eg.db\",\n                       \"UniProt.ws\"))"},{"path":"r-packages.html","id":"from-github-and-others-sources","chapter":"3 R packages","heading":"3.3 From GitHub and others sources","text":"Another important source R packages GitHub. GitHub just place R packages developed put repositories CRAN Bioconductor, many packages including PELSA package can installed well.example install_github() function devtools package. package required yet.","code":"\ndevtools::install_github(\"nicohuttmann/PELSA\")"},{"path":"the-tidyverse.html","id":"the-tidyverse","chapter":"4 The tidyverse","heading":"4 The tidyverse","text":"may already installed tidyverse previous chapter. collection many R packages made data science. see high level dialect - allows base R“tidyverse opinionated collection R packages designed data science. packages share underlying design philosophy, grammar, data structures.”tidyverse extensively described R Data Science (2e) book10 recommended Learn tidyverse individual packages summarized Posit cheatsheets.","code":""},{"path":"coding-style.html","id":"coding-style","chapter":"5 Coding style","heading":"5 Coding style","text":"Okay, nearly made project. took us 5+ introductory chapters. one . promise.First , sorry use word ‘’ chapter. like . However, believe important understand certain ideas nuances come . Especially different approaches lead result especially early stages learning something like programming.One decision may already guessed, follower tidyverse try use instead base R solutions wherever possible.11 Still, almighty sometimes need solutions. example dividing two data frames require tidyverse functions pivot_longer, inner_join, mutate pivot_wider. elegant base R solution data matrices simply using mathematical operator /.Damn, writing example, found trying show work, somehow work. let explain don’t like example.structure object R can found using class() function. Just try .objects base R example matrices. Let’s check tidyverse example.output divide operation tibble (“tbl_df”) object anymore, data.frame. big problem now, can solved quite easily tibble::as_tibble() function:better avoided.real tidyverse solution work following.seems like tideous example comparison, also bears ’s advantages see later.Btw, ’ve done code-condensed form.need understand immediately, common operations omics data science. understand pivot functions within week, ’re years ahead compared journey data science :)","code":"\nm1 <-  matrix(1:9, nrow = 3)\n\nm2 <-  matrix(1:9, nrow = 3) * 2\n\nm2 / m1\nt1 <- tibble(a = 1:3, b = 4:6, c = 7:9)\n\nt2 <- tibble(a = 1:3, b = 4:6, c = 7:9) %>% \n  mutate(across(everything(), \\(x) x * 2))\n\nt2 / t1\nclass(m1)\n\nclass(m2)\n\nclass(m2 / m1)\nclass(t1)\n\nclass(t2)\n\nclass(t2 / t1)\ntibble::as_tibble(t2 / t1)\n# First we add a row column to the tibbles, this brings them closer to real data \nt1_r <- t1 %>% \n  mutate(row = c(\"1\", \"2\", \"3\"), \n         .before = 1)\n\nt2_r <- t2 %>% \n    mutate(row = c(\"1\", \"2\", \"3\"), \n         .before = 1)\n\nt1_long <- pivot_longer(t1_r, \n                        cols = c(\"a\", \"b\", \"c\"), \n                        names_to = \"column\", \n                        values_to = \"number\")\n\nt2_long <- pivot_longer(t2_r, \n                        cols = -1, \n                        names_to = \"column\", \n                        values_to = \"number\")\n\n# We start with combining the data frames by matching both tibbles by the columns \"row\" and \"column\" and choosing a suffing for overlapping column names\nfull_join(t1_long, t2_long, by = c(\"row\", \n                                   \"column\"), \n          suffix = c(\"_1\", \"_2\")) %>% \n  # Then we can divide the values of t2 by t1 and save them in a new column \n  mutate(number = number_2 / number_1) %>% \n  # Now we finally pivot back to the wide data format from the beginning\n  pivot_wider(id_cols = \"row\", \n              names_from = \"column\", \n              values_from = \"number\")\n# First we put the tibbles in a list \nlist(\"t1\" = t1, \"t2\" = t2) %>% \n  # map allows us to do the same computation for all objects of the list as defined by the function \\(x) x...\n  map(\\(x) x %>% \n        mutate(row = c(\"1\", \"2\", \"3\"), \n               .before = 1) %>% \n        pivot_longer(cols = -1, \n                        names_to = \"column\", \n                        values_to = \"number\")) %>% \n  # Once both tibbles are ready to be combined, we can access them via the with function (we may talk about this again, I find it very helpful sometimes)\n  with(full_join(t1, t2, by = c(\"row\", \n                                   \"column\"), \n          suffix = c(\"_1\", \"_2\"))) %>% \n  # Now we continue as above\n  mutate(number = number_2 / number_1) %>% \n  # And back to a wide format tibble \n  pivot_wider(id_cols = \"row\", \n              names_from = \"column\", \n              values_from = \"number\")"},{"path":"coding-style.html","id":"coding-style-1","chapter":"5 Coding style","heading":"5.1 Coding style","text":"Well, ?! pipe. %>% . ?12We previously learned “Everything happens function call.” order result function ‘exist’, need assign object. Fine. Works. happens need multiple operations object get result?Let’s consider generic example vector contains letters like count represent barplot.first exercise book13. can simply copy code marking pressing helpful button top right corner code chunk paste R script. just run lines code look produce.saw examples different ways chain outputs different computations arrive barplot. Let’s try use %>% operator simplify process. within lineThe chain begins object random_letters followed functions subsequent line. output preceeding line always used first argument following function.equivalent :chain begins withBut hope obvious %>% useful tool, just writing less code also making code legible. Btw, find hidden message barplot? , try stretch ‘Plots’ window press ‘Zoom’ ‘Plots’ panel.making exercise even better example utility %>% :)\nmaybe nice\nprobably better explanation pipes -depth explanation, please look corresponding chapter R Data Science chapter second edition, R Data Science (2e).Using %>% pipe operator one part Style guide big impact legibility code. visually prefer old version suggest reading one two. beginning coding career, recommendations immediately obvious, remember later .","code":"\nletters_freq <- c(\"A\" = 5, \"B\" = 18, \"C\" = 20, \"D\" = 2,\n                  \"E\" = 24, \"F\" = 13, \"G\" = 1, \"H\" = 25,\n                  \"I\" = 21, \"J\" = 11, \"K\" = 19, \"L\" = 6,\n                  \"M\" = 10, \"N\" = 14, \"O\" = 16, \"P\" = 9,\n                  \"Q\" = 23, \"R\" = 17, \"S\" = 8, \"T\" = 26,\n                  \"U\" = 22, \"V\" = 7, \"W\" = 15, \"X\" = 12,\n                  \"Y\" = 3, \"Z\" = 4)\n\nrandom_letters <- rep(names(letters_freq), letters_freq)\nrandom_letters_table <- table(random_letters)\n\nrandom_letters_table_sorted <- sort(random_letters_table, decreasing = T)\n\nbarplot(random_letters_table_sorted)\nrandom_letters <- table(random_letters)\n\nrandom_letters <- sort(random_letters, decreasing = T)\n\nbarplot(random_letters)\nrandom_letters %>%  \n  table() %>% \n  sort(decreasing = T) %>% \n  barplot()\nbarplot(sort(table(random_letters), decreasing = T))\nsentence_full <- \"The quick brown fox jumps over the lazy dog\"\n#  Wow I just discovered there's a `sentences` object in R\n\n# Generate the frequency of each individual letter\nletters_freq <- sentence_full %>% \n  # Remove spaces\n  str_remove_all(\" \") %>% \n  # Split the string into individual letters \n  str_split(\"\") %>% \n  # Extract vector from list \n  unlist() %>% \n  # Make all letters upper case\n  toupper() %>% \n  # Remove dublicated letters \n  unique() %>% \n  # Make new vector with letter as name and decreasing numbers from 26 to 1 as content\n  # Do you see how the . marks the position of the argument coming from the previous line?\n  setNames(26:1, .) %>% \n  # Reorder the vector so that the solution is not immediately obvious to you guys \n  # Not this is some weird stuff here, do try this at home\n  `[`(., order(names(.)))\n\n# Test if it works\nrandom_letters <- rep(names(letters_freq), letters_freq)\n\n\n# Now prepare the example for the exercise\n\n# This function copies a vector to the console \n.cat_character_named <- function(...) {\n  \n  n <- paste0(names(...), '\" = \"', ..., '\"')\n  \n  cat(paste0('c(\"', paste(n, collapse = ',\\n\\t\"'), ')'))\n  \n}\n\n.cat_character_named(random_letters)\n\nletters_freq <- c(\"A\" = 5,\n                  \"B\" = 18,\n                  \"C\" = 20,\n                  \"D\" = 2,\n                  \"E\" = 24,\n                  \"F\" = 13,\n                  \"G\" = 1,\n                  \"H\" = 25,\n                  \"I\" = 21,\n                  \"J\" = 11,\n                  \"K\" = 19,\n                  \"L\" = 6,\n                  \"M\" = 10,\n                  \"N\" = 14,\n                  \"O\" = 16,\n                  \"P\" = 9,\n                  \"Q\" = 23,\n                  \"R\" = 17,\n                  \"S\" = 8,\n                  \"T\" = 26,\n                  \"U\" = 22,\n                  \"V\" = 7,\n                  \"W\" = 15,\n                  \"X\" = 12,\n                  \"Y\" = 3,\n                  \"Z\" = 4)"},{"path":"coding-style.html","id":"data-organization-wihtin-r","chapter":"5 Coding style","heading":"5.2 Data organization wihtin R","text":"last part","code":""},{"path":"coding-style.html","id":"summary","chapter":"5 Coding style","heading":"5.3 Summary","text":"","code":""},{"path":"getting-started.html","id":"getting-started","chapter":"6 Getting started","heading":"6 Getting started","text":"","code":""},{"path":"getting-started.html","id":"whats-our-project","chapter":"6 Getting started","heading":"6.1 What’s our project?","text":"PELSAA peptide-centric local stability assay enables proteome-scale identification protein targets binding regions diverse ligandsData availabilityPXD034606PRIDE project URIPELSA_staurosporine_K562_peptides.csv","code":""},{"path":"getting-started.html","id":"import-your-data","chapter":"6 Getting started","heading":"6.2 Import your data","text":"https://r4ds..co.nz/data-import.html#compared--base-r","code":"\n# Comment 1\ndata_raw <- vroom::vroom(\"Data/report.tsv\")\n\n# Comment 2\ndata_raw <- arrow::read_parquet(\"Data/report.parquet\")"},{"path":"getting-started.html","id":"understand-your-data","chapter":"6 Getting started","heading":"6.3 Understand your data","text":"Okay, got data","code":"\nnames()\nstr(t1)"},{"path":"getting-started.html","id":"tidy-up-your-data","chapter":"6 Getting started","heading":"6.4 Tidy up your data","text":"","code":"# Check input\n  if (all(c(Q.Value, \n            PG.Q.Value, \n            Lib.Q.Value, \n            Lib.PG.Q.Value, \n            protein.q, \n            gg.q) == 0)) \n    stop(\"All your q-value cutoffs are 1, please change them according to your study.\")\n  \n  \n  # Filter precursors by proteotypicity\n  if (proteotypic.only) \n    data_raw_filtered <- data_raw %>% \n      filter(Proteotypic != 0)\n  else \n    data_raw_filtered <- data_raw\n  \n  # Filter precursors by Q-values\n  data_raw_filtered <- data_raw_filtered %>% \n    filter(Q.Value <= Q.Value, \n           PG.Q.Value <= PG.Q.Value, \n           Lib.Q.Value <= Lib.Q.Value, \n           Lib.PG.Q.Value <= Lib.PG.Q.Value)\n  \n  # Extract quantitative data\n  \n  # Rename runs \n  data_raw_filtered <- data_raw_filtered %>% \n    mutate(Run = setNames(names(sample_names), unname(sample_names))[Run]) %>% \n    arrange(Run)\n  \n  # Summarise precursors to modified peptides \n  data_quant <- data_raw_filtered %>%  \n    summarise(!!quant_column := sum(!!rlang::sym(quant_column)), \n              .by = c(\"Run\", peptide.id)) \n  \n  # Add group information \n  data_quant <- data_quant %>% \n    mutate(Group = setNames(sample_groups, names(sample_names))[Run], \n           .after = \"Run\") %>% \n    mutate(n = sum(!!rlang::sym(quant_column) > 0), .by = c(peptide.id, \"Group\")) %>% \n    mutate(p = n / max(n), .by = \"Group\") %>% \n    filter(all(p >= min_val_per_group), .by = peptide.id) %>% ##### Check this \n    mutate(n_peptide = length(Run), .by = peptide.id) %>% \n    filter(n_peptide == max(n_peptide)) %>% \n    pivot_wider(id_cols = \"Run\", \n                names_from = peptide.id, \n                values_from = quant_column)\n  \n  \n  \n  "},{"path":"limma-analysis.html","id":"limma-analysis","chapter":"7 Limma analysis","heading":"7 Limma analysis","text":"","code":""},{"path":"reporting-results.html","id":"reporting-results","chapter":"8 Reporting results","heading":"8 Reporting results","text":"chapter serves purpose help us explore different things results.","code":""},{"path":"more-data-exploration.html","id":"more-data-exploration","chapter":"9 More data exploration","heading":"9 More data exploration","text":"","code":""},{"path":"version-control-with-github.html","id":"version-control-with-github","chapter":"11 Version control with GitHub","heading":"11 Version control with GitHub","text":"Excuse , moment talk version control?14There lot say GitHub one may use . extensive discussion topic basically everything learn chapter can found Happy Git GitHub useR.chapter introduce basics collaborate people using GitHub, probably reason reading first place.","code":""},{"path":"version-control-with-github.html","id":"headstart-into-git-and-github-with-rstudio","chapter":"11 Version control with GitHub","heading":"11.1 Headstart into Git and GitHub with RStudio","text":"following post provides quick introduction set Git GitHub connect GitHub account RStudio: https://www.bioinformatics.babraham.ac.uk/training/RStudio_GitHub/Initial_setup.html.done, able connect download online GitHub repositories able start collaborating projects immediately.","code":""},{"path":"version-control-with-github.html","id":"basic-github-routine","chapter":"11 Version control with GitHub","heading":"11.2 Basic GitHub routine","text":"Open Git terminal R start lines code.Add files:Commit changes:Push commits:…","code":"git add .git commit -m \"Add important changes\"git push"},{"path":"version-control-with-github.html","id":"common-problems","chapter":"11 Version control with GitHub","heading":"11.3 Common problems","text":"following provide summary common problems encountered using Git. also serves reminder .","code":""},{"path":"version-control-with-github.html","id":"too-large-files","chapter":"11 Version control with GitHub","heading":"11.3.1 Too large files","text":"Original post answer: https://stackoverflow.com//17890278.Download BFG Repo-Cleaner jar file “bfg-x.xx.x.jar” (e.g. “bfg-1.14.0.jar”) https://rtyley.github.io/bfg-repo-cleaner/.Download BFG Repo-Cleaner jar file “bfg-x.xx.x.jar” (e.g. “bfg-1.14.0.jar”) https://rtyley.github.io/bfg-repo-cleaner/.Place file directory R project, .git folder.Place file directory R project, .git folder.Open terminal folder (e.g. via RStudio > Git > Shell…)Open terminal folder (e.g. via RStudio > Git > Shell…)Type terminal:Type terminal:file name “bfg.jar” must match name jar file file size limit can changed (e.g. 50M 50 )encouter error, type:clean dead data.encounter following error Warning : large blobs matching criteria found packfiles - repo need packed?, refer post https://stackoverflow.com/q/61769785 type git gc prior step 4.","code":"java -jar bfg.jar --strip-blobs-bigger-than 100Mgit gc --prune=now --aggressive"},{"path":"version-control-with-github.html","id":"gitignore-does-not-instantly-work","chapter":"11 Version control with GitHub","heading":"11.3.2 .gitignore does not instantly work","text":"Just :","code":"git rm -r --cached .\ngit add .\ngit commit -m \"Drop files from .gitignore\""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
